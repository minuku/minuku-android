/*
 * Copyright (c) 2016.
 *
 * DReflect and Minuku Libraries by Shriti Raj (shritir@umich.edu) and Neeraj Kumar(neerajk@uci.edu) is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * Based on a work at https://github.com/Shriti-UCI/Minuku-2.
 *
 *
 * You are free to (only if you meet the terms mentioned below) :
 *
 * Share — copy and redistribute the material in any medium or format
 * Adapt — remix, transform, and build upon the material
 *
 * The licensor cannot revoke these freedoms as long as you follow the license terms.
 *
 * Under the following terms:
 *
 * Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.
 * NonCommercial — You may not use the material for commercial purposes.
 * ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.
 * No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.
 */

package labelingStudy.nctu.minukucore.manager;

import java.util.List;

import labelingStudy.nctu.minukucore.event.IsDataExpectedEvent;
import labelingStudy.nctu.minukucore.event.NoDataChangeEvent;
import labelingStudy.nctu.minukucore.event.StateChangeEvent;
import labelingStudy.nctu.minukucore.event.Subscribe;
import labelingStudy.nctu.minukucore.exception.StreamAlreadyExistsException;
import labelingStudy.nctu.minukucore.exception.StreamNotFoundException;
import labelingStudy.nctu.minukucore.model.DataRecord;
import labelingStudy.nctu.minukucore.stream.Stream;
import labelingStudy.nctu.minukucore.streamgenerator.StreamGenerator;

/**
 * Created by shriti on 7/9/16.
 * Registry of all streams in the system
 * Provides methods to access Streams
 * @see labelingStudy.nctu.minukucore.stream.Stream
 * @version 1.0
 */
public interface StreamManager {

    /**
     * Fetch all the streams that are registered with the StreamManager
     * @return a list of Stream class instances {@link labelingStudy.nctu.minukucore.stream.Stream}
     */
    public List<Stream> getAllStreams();

    /**
     * Register a Stream s with application specific DataRecord of type T
     * Registering a stream that does not exist throws exception
     * Registering a stream that is already registered throws exception
     *
     * @param s the new stream to be registered
     * @param clazz the class for DataRecord that the Stream holds
     * @param aStreamGenerator the StreamGenerator which called the register method.
     * @param <T> the application specific DataRecord {@link labelingStudy.nctu.minukucore.model.DataRecord}
     * @throws StreamNotFoundException {@link labelingStudy.nctu.minukucore.exception.StreamNotFoundException}
     * @throws StreamAlreadyExistsException {@link labelingStudy.nctu.minukucore.exception.StreamAlreadyExistsException}
     */
    public <T extends DataRecord> void register(Stream s, Class<T> clazz,
                                                StreamGenerator aStreamGenerator)
            throws StreamNotFoundException, StreamAlreadyExistsException;

    /**
     * Unregister stream s
     * Unregistering a stream that does not exist throws expection
     * @param s the Stream to be unregistered
     * @param sg the StreamGenerator to be registered
     * @return null
     * @throws StreamNotFoundException {@link labelingStudy.nctu.minukucore.exception.StreamNotFoundException}
     */
    public void unregister(Stream s, StreamGenerator sg) throws StreamNotFoundException;

    /**
     * Fetch the Stream for the DataRecord that the stream holds
     * Throw exception if the stream does not exist
     * @param clazz the class for DataRecord that the Stream holds
     * @param <T> the application specific DataRecord {@link labelingStudy.nctu.minukucore.model.DataRecord}
     * @return a stream of application specific DataRecord T
     * @throws StreamNotFoundException {@link labelingStudy.nctu.minukucore.exception.StreamNotFoundException}
     */
    public <T extends DataRecord> Stream<T> getStreamFor(Class<T> clazz) throws StreamNotFoundException;


    /**
     * Fetch the StreamGenerator registered for a DataRecord.
     * Throw exception of the stream related to this stream is not registered.
     * @param clazz the class for the DataRecord that is being generated by this StreamGenerator
     * @param <T> the application specific DataRecord
     * @return a stream generator for the application specific DataRecord <T>
     * @throws StreamNotFoundException
     */
    public <T extends DataRecord> StreamGenerator<T> getStreamGeneratorFor(Class<T> clazz)
            throws StreamNotFoundException;


    //subscribe this to the state change event in the abstract class

    /**
     * Called when a state change event is triggered by the StreamGenerator
     * {@link labelingStudy.nctu.minukucore.streamgenerator.StreamGenerator}
     * Subscribes to the state change event
     * {@link labelingStudy.nctu.minukucore.event.StateChangeEvent}
     * This method then calls the state change handler of the SituationManager
     * {@link labelingStudy.nctu.minukucore.manager.SituationManager}
     */
    @Subscribe
    public void handleStateChangeEvent(StateChangeEvent aStateChangeEvent);

    @Subscribe
    public void handleNoDataChangeEvent(NoDataChangeEvent aNoDataChangeEvent);

    @Subscribe
    public void handleIsDataExpectedEvent(IsDataExpectedEvent aIsDataExpectedEvent);

    /**
     * get all the streams of a specific type
     * @param <T>        the application specific DataRecord
     *                   {@link DataRecord}
     * @param streamType type of stream
     *                   {@link Stream.StreamType}
     * @return           list of streams
     */
    public <T extends DataRecord> List<Stream<? extends DataRecord>> getStreams(
            Stream.StreamType streamType);

}

